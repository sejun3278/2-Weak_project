우리는 전까지 각각의 주소(router)들을 이용해서
각각의 결과(controller)를 보여줄 수 있었다.

'localhost:3000/'으로 들어가면 'Hello Express'를 보여주고
'localhost:3000/room'으로 들어가면 'My Room!'을 보여줬다.

그런데 각각의 주소가 나타내는 결과들은 달라도
그 결과들은 오늘이든 내일이든 내가 수정하지 않는한
언제나 같은 결과물만을 보여준다.
즉 유동적이지 않고 항상 고정적인 형태를 가진다.

항상 같은 path(router로 접근하는 주소)로 접근을 하더라도
때에 따라서 다른 결과를 받을 수 있게 설계된 것이 바로
'query string' (쿼리 스트링)이다.

쿼리 스트링의 사용법은 간단하게, path 주소 뒤에 '?id=1'처럼
때에 따라 바뀔 수 있는 변수를 삽입해서 접근하면 된다.

만약 http://localhost:3000/jade 이라는 path가 5개의 쿼리 스트링을 가졌을 때
사용자는 해당 주소로 접근을 했을 때 5개의 결과물을 볼 수 있게
설계할 수 있다는 이야기가 된다.

그리고 이 전체의 주소가 되는 것이 url이 된다.
그럼 실제로 하나의 path 안에 여러개의 쿼리 스트링으로
들어갈 수 있는 정보들을 직접 만들어보자.

//  const express = require('express')
    const app = express();

    app.use(express.static('public'));
    app.set('views engine', 'jade');
    app.set('views', './views');
    
    app.get('/', (req, res) => {
        app.send('Hello, URL!')
    })

    app.get('/jade', (req, res) => {
        app.render('index', {time:Date(), _title:'Jade'})
    })

    app.get('/topic', (req, res) => {
        let topics = [
            'Javascript is ...',
            'Nodejs is ...',
            'Express is ...'
        ]

        let as = `
            <a href="/topic?id=0"> Javascript </a> <br>
            <a href="/topic?id=1"> Nodejs </a> <br>
            <a href="/topic?id=2"> Express </a> <br> <hr>
            <p> ${topics[req.query.id]} </p>
        `
        res.send(as)
    })

topic이라는 router에 0부터 2까지의 query string 값을 주고,
topics라는 배열에 각각의 인덱스 값으로 정보를 담아준다.

그리고 as라는 변수 ``안에 들어간 a 태그에 '?id=[]'를 넣어주면서
해당 태그를 누를 때마다 들어가는 query string에 따라서
화면에 표현해주게 되는 코드를 구현했다.

즉, 만약 내가 Javascript라는 제목을 가지는 a 태그를 눌렀을 때
그 a 태그는 곧 http://localhost:3000/topic?id=0 이란 url로 이동하게 되고
우리는 'req.query.id'라는 함수를 통해서 id로 들어오는 값을 찾아온 뒤
그 값을 topics의 인덱스 값을 찾아서 화면에 표시하는 것이다.

그렇게 되면, Nodejs 제목을 클릭했을 때 id 값으로 1을 가져오니까
배열에서 인덱스 값이 1이 되는 'Nodejs is ...'란 문구를 출력할 수 있게 된다.

그런데 우리가 사용하고 있는 웹 사이트들의 url을 자세히 보면
query string 형식이 아닌 path 형식을 사용하고 있다. (ex : http://naver/blog)
이러한 방식을 사용하는 것을 sementic url 이라고 하는데
간단하게 변경할 수 있다.

//   app.get('/topic/:id', (req, res) => {
    const topics = [
        'Javascript is ...',
        'Nodejs is ...',
        'Express is ...'
    ]

    const as = `
        <a href="/topic/0"> Javascript </a>
        <a href="/topic/1"> Nodejs </a>
        <a href="/topic/2"> Express </a>
        <p> ${topics[req.params.id]} </p>
    `
    res.send(as)
})

처음에 언듯 본다면 query string과 무슨 차이점을 가지는지
한눈에 보이기는 쉽지 않지만 하나하나 본다면 찾을 수 있을 것이다.
처음 router를 지정했을 때, query string은 '?id=0' 형식의 코드를 가지고 있었지만
sementic 형식은 '/:id'란 형식으로 이루어져 있다.

그리고 as 변수 내에서 href가 가리키고 있는 주소가
path 형식으로 이루어져 있고,
p 태그로 감싸져 있는 부분은 req,params.id로 id 값을 호출하고 있다.
템플릿 엔진(Jade)란 무엇인가?
: 우리는 앞서 동적인 것과 정적인 것에 대한 특징과 장단점을 알아봤다.
  복습겸 다시 알아보자면

  정적 : use 함수를 이용해서 사용하며
        특정 폴더(default : public)에 있는 파일을 가져올 수 있다.
        
        장 ) 서버를 껐다 킬 필요가 없이 바로 최신화가 가능하다.

        단 ) Javascript 문법에 접근할 수 없다.


  동적 : send 함수를 이용해서 사용한다.

        장 ) Javascript 문법을 사용할 수 있다. (``나 {} 등을 사용한다.)

        단 ) 내용이 바뀔 경우 서버를 껐다 켜야 하는 번거로움이 생긴다.

이러한 특징과 장단점이 있고
Jade은 그러한 장점들을 하나로 해결해주며
HTML 태그와 Javascript 문법을 하나로 연결해준다.

먼저 템플릿 엔진을 사용하기 위해서는 템플릿 엔진을 설치해야 한다.
그 중에서 우리는 jade라는 모듈을 설치해서 사용해야 하므로
아래와 같은 코드를 터미널에 입력한다.
// npm install jade

jade를 설치했다면 이제 내가 사용할 에디터에
해당되는 템플릿 엔진을 사용하겠다는 코드를 작성해야 한다.
// app.set('view engine', 'jade');

set 함수를 사용해서, 첫번째 인자로는 템플릿 엔진을 
두번째 인자로는 템플릿 엔진의 jade를 사용하겠다는 의미이다.

그 다음으로는 정적파일의 public 처럼
템플릿 엔진이 담겨져 있는 디렉토리를 알려줘야 한다.
// app.set('views', './views')

views는 템플릿 엔진의 디폴트 값이 되는 이름인데
디렉토리 이름이 views로 되어 있다면
저 코드를 넣지 않아도 자동으로 연결이 된다.
(폴더 이름이 views가 아니라면 꼭 써야 한다!)

그럼 이제 기본적인 템플릿 엔진 세팅은 끝이 났다.
views 디렉토리 안에 index.jade라는 파일을 생성하고
첫번째 줄에 html 이란 글자만 넣어보자.

그리고 jade라는 router로 접근을 하면
controller가 index.jade를 브라우저로 실행하게 하는
코드를 작성할 수 있게 된다.

// app.get('/jade', (req, res) => {
    res.render('index')
})

여태까지 우리는 send 함수로 콘트롤러를 나타냈지만
render라는 함수를 이용해 views라는 디렉토리 안에서
render의 인자값 안에 들어있는 파일의 이름을 자동적으로 찾아
화면에 나타내준다.